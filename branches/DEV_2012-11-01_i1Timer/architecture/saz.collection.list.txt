saz.collection.list


■参考にしたもの

◎Linked List

挿入個所が見つかるまで配列内のデータをコピーしてずらしていきましたが，リンク・リストならずっと簡単に挿入できます。
理屈がわかったら，リンク・リスト内の値をすべて書き出したり，追加/挿入/削除をするプログラムをぜひ作ってみてください。
それができたら，できたリンク・リスト処理プログラムを利用してスタックとキューを作ってみましょう（図B）。どちらもデータを
自由に出し入れできるデータ構造です。出し入れの際，スタックは一番最後に入れたデータが一番最初に出てきます。
一方，キューは入れた順番でデータが出てきます。
▽定番アルゴリズムを徹底理解！ - 今からでも遅くない！アルゴリズム入門：ITpro
http://itpro.nikkeibp.co.jp/article/COLUMN/20061024/251654/?ST=selfup&P=10

連結リストの主な利点は、リスト上のノードを様々な順番で検索可能な点である。
連結リストは場所が分かっていれば、ノードの挿入や削除を定数時間で行うことができる（場所を探すのにかかる時間は
リスト上の順番の条件などにも依存するし、後述する片方向リストなのか双方向リストなのかにも依存する）。
連結リストにはいくつかの種類があり、片方向リスト、双方向リスト、線形リスト、循環リストなどがある。
一般に動的に変化するデータの集まりがあって、要素の追加・削除が頻繁に行われ、新たな要素を追加する位置が重要となる場合、連結リストが適しているといえる。

連結リストと配列
リストでは要素の挿入は無制限に可能であるが、配列はサイズが決まっているために限界があり…
複数のリストが尾部を共有することで、さらにメモリを節約できる場合もある。…これを使って、何らかのデータの古いバージョンと新しいバージョンを同時に保持することが可能であり、簡単な永続データ構造の例となっている。

一方、配列はランダムアクセス性に優れており、連結リストがシーケンシャルアクセスを得意とするのと対照的である。
片方向リストは一方向にしか辿れない。従って、ヒープソートのようにインデックスによって高速に要素を参照する必要がある場合、連結リストは不向きである。
シーケンシャルアクセスも多くのマシン上では、連結リストよりも配列の方が高速である。これは、キャッシュメモリの効果と参照の局所性によるものである。連結リストはキャッシュメモリからはほとんど何も恩恵を受けない。

連結リストの別の欠点は、参照のための余分な領域を必要とする点である。このため、キャラクタやブーリアン型のような小さなデータ要素を連結リストで操作するのは
（1文字ごとにノードを割り当てて文字列操作を実現するなど）、速度の面でもメモリ消費の面でも無駄が多く、現実的でない。

…ノードの削除も簡単である。しかし、循環リストでは、現在のノードから n 番目のノードを見つけるには、リストを順に辿っていくしかない。配列であればインデックスの計算で即座に見つけられる。
一方、配列では要素（ノード）の削除は容易ではなく、n 番目のノードを即座に見つけるという利点を生かすには、ノードを削除したときに残った要素を詰めてやる必要がある。

▽連結リスト - Wikipedia
http://ja.wikipedia.org/wiki/%E9%80%A3%E7%B5%90%E3%83%AA%E3%82%B9%E3%83%88

◎.NET
▽ICollection(T) インターフェイス
http://msdn.microsoft.com/ja-jp/library/92t2ye13.aspx
▽IList(T) インターフェイス
http://msdn.microsoft.com/ja-jp/library/5y536ey6.aspx

◎Java
▽List (Java 2 Platform SE 5.0)
http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/java/util/List.html
▽ArrayList
http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/java/util/ArrayList.html
▽LinkedList
http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/java/util/LinkedList.html

◎AS3
▽FN1010001 - 連結リスト(linked list) - Flash : テクニカルノート
http://www.fumiononaka.com/TechNotes/Flash/FN1010001.html

Vector.push():	13
Vector.shift():	2530
LinkedList.push():	12
LinkedList.shift():	3
▽push() and shift() operation of Vector and Linked List - wonderfl build flash online
http://wonderfl.net/c/7Hbt/read
